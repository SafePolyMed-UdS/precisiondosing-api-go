package model

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

type Order struct {
	gorm.Model
	OrderID string          `gorm:"type:char(36);not null"` // UUID generated by us
	Order   json.RawMessage `gorm:"type:json;not null"`
	// Precheck
	PreCheckError *bool            `gorm:"type:bool"`
	Precheck      *json.RawMessage `gorm:"type:json"`
	PrecheckErr   *string          `gorm:"type:text"`
	LastPrecheck  *time.Time       `gorm:"type:timestamp"`
	// Results
	ResultSuccess bool             `gorm:"type:bool"`
	ResultJSON    *json.RawMessage `gorm:"type:json"`
	ResultPDF     string           `gorm:"type:longtext"`
	// Created -> Started -> Completed -> Sent
	CreatedAt   *time.Time `gorm:"type:timestamp"`
	StartedAt   *time.Time `gorm:"type:timestamp"`
	CompletedAt *time.Time `gorm:"type:timestamp"`
	// Sending results
	SentAt   *time.Time `gorm:"type:timestamp"`
	SentTrys int        `gorm:"type:int;default:0"`
}

func (j *Order) BeforeCreate(_ *gorm.DB) error {
	j.OrderID = uuid.New().String()
	return nil
}
