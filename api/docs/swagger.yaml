definitions:
  ChangeUserProfileQuery:
    properties:
      role:
        enum:
        - admin
        - user
        - approver
        example: user
        type: string
      status:
        enum:
        - active
        - inactive
        example: inactive
        type: string
    type: object
  CreateServiceUserQuery:
    properties:
      email:
        example: joe@gmail.com
        maxLength: 255
        minLength: 2
        type: string
      first_name:
        example: Joe
        maxLength: 255
        minLength: 2
        type: string
      last_name:
        example: Doe
        maxLength: 255
        minLength: 2
        type: string
      organization:
        example: ACME
        maxLength: 255
        minLength: 2
        type: string
      password:
        example: password123
        type: string
      role:
        enum:
        - admin
        - user
        - approver
        type: string
    required:
    - email
    - first_name
    - last_name
    - organization
    - password
    - role
    type: object
  ErrorResponse:
    properties:
      error:
        description: Error message
        example: Some error message
        type: string
    type: object
  InfoResp:
    properties:
      meta_info:
        allOf:
        - $ref: '#/definitions/cfg.MetaConfig'
        description: Meta
    type: object
  JSendError:
    properties:
      message:
        description: Error message
        example: Internal server error
        type: string
      status:
        description: Status
        example: error
        type: string
    type: object
  JSendFailure-ErrorResponse:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/ErrorResponse'
        description: Data with error message(s)
      status:
        description: Status 'fail'
        example: fail
        type: string
    type: object
  JSendFailure-ValidationResponse:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/ValidationResponse'
        description: Data with error message(s)
      status:
        description: Status 'fail'
        example: fail
        type: string
    type: object
  JSendSuccess-InfoResp:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/InfoResp'
        description: Data with success message(s)
      status:
        description: Status 'success'
        example: success
        type: string
    type: object
  JSendSuccess-LoginResponse:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/LoginResponse'
        description: Data with success message(s)
      status:
        description: Status 'success'
        example: success
        type: string
    type: object
  JSendSuccess-PingResp:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/PingResp'
        description: Data with success message(s)
      status:
        description: Status 'success'
        example: success
        type: string
    type: object
  JSendSuccess-map_string_string:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/map_string_string'
        description: Data with success message(s)
      status:
        description: Status 'success'
        example: success
        type: string
    type: object
  JSendSuccess-model_User:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/model.User'
        description: Data with success message(s)
      status:
        description: Status 'success'
        example: success
        type: string
    type: object
  LoginQuery:
    properties:
      login:
        example: joe@me.com
        type: string
      password:
        example: password
        type: string
      role:
        enum:
        - admin
        - user
        - approver
        example: user
        type: string
    required:
    - login
    - password
    type: object
  LoginResponse:
    properties:
      access_expires_in:
        type: string
      access_token:
        type: string
      last_login:
        description: Last login time
        example: "2021-07-01T12:00:00Z"
        type: string
      refresh_expires_in:
        type: string
      refresh_token:
        type: string
      role:
        description: User role
        example: user
        type: string
      token_type:
        type: string
    type: object
  PingResp:
    properties:
      message:
        description: Message
        example: pong
        type: string
    type: object
  RefreshQuery:
    properties:
      refresh_token:
        example: my_refresh_token
        type: string
    required:
    - refresh_token
    type: object
  ValidationResponse:
    properties:
      errors:
        description: Validation errors
        items:
          $ref: '#/definitions/apierr.ValidationError'
        type: array
    type: object
  apierr.ValidationError:
    properties:
      field:
        type: string
      reason:
        type: string
    type: object
  cfg.MetaConfig:
    properties:
      api:
        type: string
      description:
        type: string
      url:
        type: string
      version:
        type: string
      version_tag:
        type: string
    type: object
  map_string_string:
    additionalProperties:
      type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_login:
        type: string
      last_name:
        type: string
      organization:
        type: string
      role:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/users:
    get:
      description: |-
        __Admin role required__
        List all users for the API.
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/JSendSuccess-map_string_string'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "403":
          description: Non-admin user
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/JSendError'
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - Admin
  /admin/users/{email}:
    delete:
      description: |-
        __Admin role required__
        Delete a user by their email address. Cannot delete own account.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/JSendSuccess-map_string_string'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "403":
          description: Cannot delete own account
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/JSendError'
      security:
      - Bearer: []
      summary: Delete user by email
      tags:
      - Admin
    get:
      description: |-
        __Admin role required__
        Retrieve a single user by their email address.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/JSendSuccess-model_User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "403":
          description: Non-admin user
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/JSendError'
      security:
      - Bearer: []
      summary: Get user by email
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: |-
        __Admin role required__
        Update a user's role or status. Cannot change own role or status.
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      - description: Role and/or status updates
        in: body
        name: ChangeUserProfileQuery
        required: true
        schema:
          $ref: '#/definitions/ChangeUserProfileQuery'
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated
          schema:
            $ref: '#/definitions/JSendSuccess-map_string_string'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "403":
          description: Cannot change own role or status
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/JSendError'
      security:
      - Bearer: []
      summary: Change user profile
      tags:
      - Admin
  /admin/users/service:
    post:
      description: |-
        __Admin role required__
        Create a new service user for the API.
        You can create users with the following roles: `admin`, `user`, `approver`.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CreateServiceUserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/JSendSuccess-map_string_string'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "403":
          description: Non-admin user
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "422":
          description: Bad query format
          schema:
            $ref: '#/definitions/JSendFailure-ValidationResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/JSendError'
      security:
      - Bearer: []
      summary: Create a new service user
      tags:
      - Admin
  /sys/info:
    get:
      description: Get information about the API including version and query limits.
      produces:
      - application/json
      responses:
        "200":
          description: Response with API info
          schema:
            $ref: '#/definitions/JSendSuccess-InfoResp'
      summary: Get API Info
      tags:
      - System
  /sys/ping:
    get:
      description: Ping the API to check if it is alive.
      produces:
      - application/json
      responses:
        "200":
          description: Response with pong message
          schema:
            $ref: '#/definitions/JSendSuccess-PingResp'
      summary: Ping the API
      tags:
      - System
  /user/login:
    post:
      description: |-
        Acciqures a JWT token for the user to access the API
        Only active users can login
        Users can downgrade their role by providing the role in the request (optional)
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/LoginQuery'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/JSendSuccess-LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "403":
          description: User is not active
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "422":
          description: Bad query format
          schema:
            $ref: '#/definitions/JSendFailure-ValidationResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/JSendError'
      summary: Login for the API to get JWT token
      tags:
      - Login
  /user/refresh-token:
    post:
      description: Refreshes the JWT token for the user to access the API
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/RefreshQuery'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/JSendSuccess-LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "403":
          description: Not active/role invalid/user deleted
          schema:
            $ref: '#/definitions/JSendFailure-ErrorResponse'
        "422":
          description: Bad query format
          schema:
            $ref: '#/definitions/JSendFailure-ValidationResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/JSendError'
      summary: Refresh JWT token
      tags:
      - Login
swagger: "2.0"
