// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nList all users for the API.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Non-admin user",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/admin/users/service": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nCreate a new service user for the API.\nYou can create users with the following roles: ` + "`" + `admin` + "`" + `, ` + "`" + `user` + "`" + `, ` + "`" + `approver` + "`" + `.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new service user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateServiceUserQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Non-admin user",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/admin/users/{email}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nRetrieve a single user by their email address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-model_User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Non-admin user",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nDelete a user by their email address. Cannot delete own account.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Cannot delete own account",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nUpdate a user's role or status. Cannot change own role or status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Change user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role and/or status updates",
                        "name": "ChangeUserProfileQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeUserProfileQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Cannot change own role or status",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/models": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Authentication required__\nRetrieve a list of all available PBPK models.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Models"
                ],
                "summary": "List available models",
                "responses": {
                    "200": {
                        "description": "List of models",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-ModelsResp"
                        }
                    }
                }
            }
        },
        "/sys/info": {
            "get": {
                "description": "Get information about the API including version and query limits.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get API Info",
                "responses": {
                    "200": {
                        "description": "Response with API info",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-InfoResp"
                        }
                    }
                }
            }
        },
        "/sys/ping": {
            "get": {
                "description": "Ping the API to check if it is alive.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Ping the API",
                "responses": {
                    "200": {
                        "description": "Response with pong message",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-PingResp"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Acciqures a JWT token for the user to access the API\nOnly active users can login\nUsers can downgrade their role by providing the role in the request (optional)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Login for the API to get JWT token",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User is not active",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/refresh-token": {
            "post": {
                "description": "Refreshes the JWT token for the user to access the API",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RefreshQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not active/role invalid/user deleted",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ChangeUserProfileQuery": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "approver"
                    ],
                    "example": "user"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "inactive"
                }
            }
        },
        "CreateServiceUserQuery": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "organization",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "joe@gmail.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Joe"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Doe"
                },
                "organization": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "ACME"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "approver"
                    ]
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Some error message"
                }
            }
        },
        "InfoResp": {
            "type": "object",
            "properties": {
                "meta_info": {
                    "description": "Meta",
                    "allOf": [
                        {
                            "$ref": "#/definitions/cfg.MetaConfig"
                        }
                    ]
                }
            }
        },
        "JSendError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Internal server error"
                },
                "status": {
                    "description": "Status",
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "JSendFailure-ErrorResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with error message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'fail'",
                    "type": "string",
                    "example": "fail"
                }
            }
        },
        "JSendFailure-ValidationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with error message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ValidationResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'fail'",
                    "type": "string",
                    "example": "fail"
                }
            }
        },
        "JSendSuccess-InfoResp": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/InfoResp"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/LoginResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-ModelsResp": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ModelsResp"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-PingResp": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/PingResp"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-map_string_string": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/map_string_string"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-model_User": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "LoginQuery": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "example": "joe@me.com"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "approver"
                    ],
                    "example": "user"
                }
            }
        },
        "LoginResponse": {
            "type": "object",
            "properties": {
                "access_expires_in": {
                    "type": "string"
                },
                "access_token": {
                    "type": "string"
                },
                "last_login": {
                    "description": "Last login time",
                    "type": "string",
                    "example": "2021-07-01T12:00:00Z"
                },
                "refresh_expires_in": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "role": {
                    "description": "User role",
                    "type": "string",
                    "example": "user"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "ModelsResp": {
            "type": "object",
            "properties": {
                "models": {
                    "description": "List of models",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pbpk.ModelDefinition"
                    }
                }
            }
        },
        "PingResp": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message",
                    "type": "string",
                    "example": "pong"
                }
            }
        },
        "RefreshQuery": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "my_refresh_token"
                }
            }
        },
        "ValidationResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "description": "Validation errors",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apierr.ValidationError"
                    }
                }
            }
        },
        "apierr.ValidationError": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "cfg.MetaConfig": {
            "type": "object",
            "properties": {
                "api": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "version_tag": {
                    "type": "string"
                }
            }
        },
        "map_string_string": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_login": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "pbpk.ModelDefinition": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "perpetrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "victim": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
